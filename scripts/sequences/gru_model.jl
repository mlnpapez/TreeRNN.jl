#=
###############################################
#                                             #
#           GRU Model Implementation          #
#                                             #
#                                             #
###############################################

This file implements a Gated Recurrent Unit (GRU) model
for sequence (next character) prediction based on the dataset generated by ALICE.

Author: Do Viet Anh
=#

using Flux
using LinearAlgebra

# Define the GRU cell structure
struct GRUCell{T}
    w::Matrix{T}  # Input weights
    u::Matrix{T}  # Hidden weights
    b::Vector{T}  # Bias
end

Flux.@functor GRUCell

"""
Initialize a GRU cell with given input and hidden sizes
"""
function GRUCell(input_size::Int, hidden_size::Int; init=Flux.glorot_uniform)
    return GRUCell(
        init(3 * hidden_size, input_size),
        init(3 * hidden_size, hidden_size),
        init(3 * hidden_size)
    )
end

"""
Forward pass for the GRU cell
"""
function (m::GRUCell)(h::AbstractVector, x::AbstractVector)
    gates = m.w * x .+ m.u * h .+ m.b
    r, z, n = Flux.chunk(gates, 3)
    
    r = σ.(r)
    z = σ.(z)
    n = tanh.(n .+ r .* (m.u[2*length(h)+1:end, :] * h))
    
    h′ = (1 .- z) .* n .+ z .* h
    return h′, h′
end

# Define the full GRU model structure
mutable struct GRU
    cell::GRUCell
    output::Chain
    state::Vector{Float32}
end

Flux.@functor GRU

"""
Initialize the full GRU model
"""
function GRU(input_size::Int, hidden_size::Int, output_size::Int)
    return GRU(
        GRUCell(input_size, hidden_size),
        Chain(Dense(hidden_size, output_size), softmax),
        zeros(Float32, hidden_size)
    )
end

"""
Forward pass for the full GRU model
"""
function (m::GRU)(x::AbstractMatrix)
    outputs = map(1:size(x,2)) do t
        m.state, h_out = m.cell(m.state, x[:, t])
        m.output(h_out)
    end
    return hcat(outputs...)
end

"""
Reset the GRU model's state
"""
function Flux.reset!(m::GRU)
    m.state = zeros(Float32, length(m.state))
end